[
	{
		"analysis": {
			"script": {
				"db_id": null,
				"file_name": null,
				"script": null,
				"sql": "",
				"use_script": false
			},
			"setting": {
				"aggregation_default": {
					"type": "column",
					"val": null
				},
				"filter_default": [],
				"items": []
			},
			"type": "none"
		},
		"category": {
			"title": "logserver"
		},
		"convert": {
			"script": {
				"file_name": "convert_casp_header.py",
				"script": "from resource.script.convert_base import ConvertBase\r\n\r\nimport pandas as pd\r\nimport copy\r\nimport re\r\n\r\nconvert_columns = {\r\n    \"event_id\": \"event_id\",\r\n    \"event_time\": \"event_time\",\r\n    \"header1\": \"log_time\",\r\n    \"header2\": \"type\",\r\n    \"header3\": \"job_name\",\r\n    \"header4\": \"lot_id\",\r\n    \"header5\": \"plate_no\",\r\n    \"header6\": \"shot_no\",\r\n    \"header7\": \"cp\",\r\n    \"header8\": \"glass_id\",\r\n    \"header9\": \"mode\",\r\n    \"header10\": \"dir\",\r\n    \"header11\": \"start_psy\",\r\n    \"header12\": \"start_msy\",\r\n    \"header13\": \"start_smby\",\r\n    \"header14\": \"target_psy\",\r\n    \"header15\": \"target_msy\",\r\n    \"header16\": \"target_smby\",\r\n    \"header17\": \"mp_offset\",\r\n    \"header18\": \"expo_position_start\",\r\n    \"header19\": \"expo_position_finish\",\r\n    \"header20\": \"valid_tolerance_psy\",\r\n    \"header21\": \"valid_tolerance_msy\",\r\n    \"header22\": \"valid_tolerance_smby\",\r\n    \"header23\": \"smb_start_pos\",\r\n    \"header24\": \"msy_delay_time\",\r\n    \"header25\": \"expo_speed\",\r\n    \"header26\": \"smb_speed\"\r\n}\r\n\r\n\r\nclass ConvertScript(ConvertBase):\r\n    \"\"\"\r\n    .. class:: ConvertScript\r\n\r\n        This class is for converting input file by user script.\r\n    \"\"\"\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> pd.DataFrame:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: DataFrame\r\n        \"\"\"\r\n        logDate = dict()\r\n        resultDate = list()\r\n        time_before = 0\r\n        time_cnt = 0\r\n        functionName = 'CASPHeader'\r\n\r\n        # Read Log File\r\n        lines = self.readlines()\r\n\r\n        for line in lines:\r\n\r\n            # 改行コード等を除外した上で分割\r\n            linelog = line.strip().split(',')\r\n            i = 1\r\n            if not re.search('\\s*CASPHD\\s*', linelog[1]):\r\n                continue\r\n\r\n            logDate[\"event_id\"] = functionName + \"Event\"\r\n            for etc in linelog:\r\n                if i == 1:\r\n                    # 2020/03/04 09:03:14　の形式を\r\n                    # 2020-03-04T09:03:14.000000+0900　の形式に変える\r\n                    # 日付と時間にわける\r\n                    date, time = etc.split(\" \")\r\n                    # 日付の年月日をわける\r\n                    year, month, day = date.split(\"/\")\r\n                    month = month.rjust(2, \"0\")\r\n                    day = day.rjust(2, \"0\")\r\n                    time = time + \":00\"\r\n                    tmp = year + \"-\" + month + \"-\" + day + \"T\" + time\r\n                    # 同じ時間の場合、ずらす（ずらさないとElasticSearchにデータが入らなくなるため）\r\n                    if time_before == etc:\r\n                        time_cnt += 1000\r\n                    else:\r\n                        time_before = etc\r\n                        time_cnt = 0\r\n                    data_cnt = str(time_cnt).rjust(6, \"0\")\r\n                    tmp = tmp + \".\" + data_cnt\r\n                    tmp = tmp + \"+0900\"\r\n                    logDate[\"event_time\"] = tmp\r\n\r\n                if '=' in etc:\r\n                    etc = etc[etc.find('=') + 1:]\r\n\r\n                if '\\\"' in etc:\r\n                    etc = etc.replace('\\\"', '')\r\n\r\n                if '\\t' in etc:\r\n                    etc = etc.replace('\\t', '')\r\n                # 対応するキーが存在しないため、header + 連番をキーにする\r\n                key = \"header\" + str(i)\r\n                logDate[key] = etc\r\n                i = i + 1\r\n\r\n            resultDate.append(copy.deepcopy(logDate))\r\n\r\n        df = pd.DataFrame(resultDate)\r\n        df.rename(columns=convert_columns, inplace=True)\r\n        df['log_time'] = pd.to_datetime(df['log_time'])\r\n\r\n        return df\r\n",
				"use_script": true
			}
		},
		"func": {
			"info": {
				"log_name": "CASPHeader"
			},
			"script": {
				"file_name": "preprocess_casp_header.py",
				"script": "from resource.script.preprocess_base import PreprocessBase\r\n\r\n\r\nclass PreprocessScript(PreprocessBase):\r\n    \"\"\"\r\n    .. class:: PreprocessScript\r\n\r\n        This class is for preprocessing input file by user script.\r\n    \"\"\"\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> list:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: List of String\r\n        \"\"\"\r\n        lines = self.readlines()\r\n\r\n        ret_lines = list()\r\n\r\n        for line in lines:\r\n            if '\\\"' in line:\r\n                line = line.replace('\\\"', '')\r\n            ret_lines.append(line)\r\n\r\n        return ret_lines\r\n",
				"use_script": true
			},
			"source_type": "local",
			"title": "CASPHeader",
			"system_func": true
		},
		"visualization": {
			"function_graph_type": [{
				"id": null,
				"name": "default",
				"script": "function renderGraph(Plotly, element, params) {\n    let tmpGraphProp = {};\n\n    const createPropData = (obj, type, params) => {\n        let tmpRange = {},\n            tmpDensityRange = {},\n            tmpData = [];\n\n        if (params.range.x.length > 0) {\n            tmpRange['xaxis'] = {\n                range: params.range.x,\n            };\n        }\n\n        if (params.range.y.length > 0) {\n            tmpRange['yaxis'] = {\n                range: params.range.y,\n            };\n        }\n\n        switch (type.toLowerCase()) {\n            case 'bar':\n            default:\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'bar',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'line':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'scatter',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'box plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        y: params.y[v],\n                        type: 'box',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'density plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push(\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            mode: 'markers',\n                            name: v,\n                            marker: {\n                                color: 'rgb(245,245,245)',\n                                size: 1.5,\n                                opacity: 0.7,\n                            },\n                            type: 'scatter',\n                        },\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            name: v,\n                            ncontours: 20,\n                            colorscale: 'Blues',\n                            reversescale: true,\n                            showscale: false,\n                            type: 'histogram2dcontour',\n                        },\n                    );\n                });\n\n                if (params.range.x.length > 0) {\n                    tmpDensityRange['xaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.x,\n                    };\n                }\n\n                if (params.range.y.length > 0) {\n                    tmpDensityRange['yaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.y,\n                    };\n                }\n\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            showlegend: false,\n                            hovermode: 'closest',\n                            bargap: 0,\n                            ...tmpDensityRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'bubble chart':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        mode: 'markers',\n                        name: v,\n                        marker: {\n                            color: 'rgb(93, 164, 214)',\n                            size: params.z,\n                        },\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n        }\n        return obj;\n    };\n\n    params.type.map((v) => {\n        tmpGraphProp = createPropData(tmpGraphProp, v, params);\n    });\n\n    Plotly.newPlot(element, tmpGraphProp.data, tmpGraphProp.layout);\n\n    if (params.func) {\n        element.on('plotly_relayout', params.func);\n    }\n}\n",
				"type": "system"
			}],
			"items": []
		}
	},
	{
		"analysis": {
			"script": {
				"db_id": null,
				"file_name": null,
				"script": null,
				"sql": "",
				"use_script": false
			},
			"setting": {
				"aggregation_default": {
					"type": "column",
					"val": null
				},
				"filter_default": [],
				"items": []
			},
			"type": "none"
		},
		"category": {
			"title": "logserver"
		},
		"convert": {
			"script": {
				"file_name": "convert_casp_table.py",
				"script": "from resource.script.convert_base import ConvertBase\r\n\r\nimport pandas as pd\r\nimport copy\r\nimport re\r\n\r\nconvert_columns = {\r\n    \"event_id\": \"event_id\",\r\n    \"event_time\": \"event_time\",\r\n    \"header1\": \"log_time\",\r\n    \"header2\": \"type\",\r\n    \"header3\": \"job_name\",\r\n    \"header4\": \"lot_id\",\r\n    \"header5\": \"plate_no\",\r\n    \"header6\": \"shot_no\",\r\n    \"header7\": \"cp\",\r\n    \"header8\": \"glass_id\",\r\n    \"header9\": \"psy\",\r\n    \"header10\": \"dr\",\r\n    \"header11\": \"my\",\r\n    \"header12\": \"yaw\",\r\n    \"header13\": \"z\",\r\n    \"header14\": \"pitch\",\r\n    \"header15\": \"roll\"\r\n}\r\n\r\n\r\nclass ConvertScript(ConvertBase):\r\n    \"\"\"\r\n    .. class:: ConvertScript\r\n\r\n        This class is for converting input file by user script.\r\n    \"\"\"\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> pd.DataFrame:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: DataFrame\r\n        \"\"\"\r\n        logDate = dict()\r\n        resultDate = list()\r\n        time_before = 0\r\n        time_cnt = 0\r\n        functionName = 'CASPTable'\r\n\r\n        # Read Log File\r\n        lines = self.readlines()\r\n\r\n        for line in lines:\r\n\r\n            # 改行コード等を除外した上で分割\r\n            linelog = line.strip().split(',')\r\n            i = 1\r\n            if not re.search('\\s*CASPTB\\s*', linelog[1]):\r\n                continue\r\n\r\n            logDate[\"event_id\"] = functionName + \"Event\"\r\n            for etc in linelog:\r\n                if i == 1:\r\n                    # 2020/03/04 09:03:14　の形式を\r\n                    # 2020-03-04T09:03:14.000000+0900　の形式に変える\r\n                    # 日付と時間にわける\r\n                    date, time = etc.split(\" \")\r\n                    # 日付の年月日をわける\r\n                    year, month, day = date.split(\"/\")\r\n                    month = month.rjust(2, \"0\")\r\n                    day = day.rjust(2, \"0\")\r\n                    time = time + \":00\"\r\n                    tmp = year + \"-\" + month + \"-\" + day + \"T\" + time\r\n                    # 同じ時間の場合、ずらす（ずらさないとElasticSearchにデータが入らなくなるため）\r\n                    if time_before == etc:\r\n                        time_cnt += 1000\r\n                    else:\r\n                        time_before = etc\r\n                        time_cnt = 0\r\n                    data_cnt = str(time_cnt).rjust(6, \"0\")\r\n                    tmp = tmp + \".\" + data_cnt\r\n                    tmp = tmp + \"+0900\"\r\n                    logDate[\"event_time\"] = tmp\r\n\r\n                if '=' in etc:\r\n                    etc = etc[etc.find('=') + 1:]\r\n\r\n                if '\\\"' in etc:\r\n                    etc = etc.replace('\\\"', '')\r\n\r\n                if '\\t' in etc:\r\n                    etc = etc.replace('\\t', '')\r\n                # 対応するキーが存在しないため、header + 連番をキーにする\r\n                key = \"header\" + str(i)\r\n                logDate[key] = etc\r\n                i = i + 1\r\n\r\n            resultDate.append(copy.deepcopy(logDate))\r\n\r\n        df = pd.DataFrame(resultDate)\r\n        df.rename(columns=convert_columns, inplace=True)\r\n        df['log_time'] = pd.to_datetime(df['log_time'])\r\n\r\n        return df\r\n",
				"use_script": true
			}
		},
		"func": {
			"info": {
				"log_name": "CASPTable"
			},
			"script": {
				"file_name": "preprocess_casp_table.py",
				"script": "from resource.script.preprocess_base import PreprocessBase\r\n\r\n\r\nclass PreprocessScript(PreprocessBase):\r\n    \"\"\"\r\n    .. class:: PreprocessScript\r\n\r\n        This class is for preprocessing input file by user script.\r\n    \"\"\"\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> list:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: List of String\r\n        \"\"\"\r\n        lines = self.readlines()\r\n\r\n        ret_lines = list()\r\n\r\n        for line in lines:\r\n            if '\\\"' in line:\r\n                line = line.replace('\\\"', '')\r\n            ret_lines.append(line)\r\n\r\n        return ret_lines\r\n",
				"use_script": true
			},
			"source_type": "local",
			"title": "CASPTable",
			"system_func": true
		},
		"visualization": {
			"function_graph_type": [{
				"id": null,
				"name": "default",
				"script": "function renderGraph(Plotly, element, params) {\n    let tmpGraphProp = {};\n\n    const createPropData = (obj, type, params) => {\n        let tmpRange = {},\n            tmpDensityRange = {},\n            tmpData = [];\n\n        if (params.range.x.length > 0) {\n            tmpRange['xaxis'] = {\n                range: params.range.x,\n            };\n        }\n\n        if (params.range.y.length > 0) {\n            tmpRange['yaxis'] = {\n                range: params.range.y,\n            };\n        }\n\n        switch (type.toLowerCase()) {\n            case 'bar':\n            default:\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'bar',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'line':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'scatter',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'box plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        y: params.y[v],\n                        type: 'box',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'density plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push(\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            mode: 'markers',\n                            name: v,\n                            marker: {\n                                color: 'rgb(245,245,245)',\n                                size: 1.5,\n                                opacity: 0.7,\n                            },\n                            type: 'scatter',\n                        },\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            name: v,\n                            ncontours: 20,\n                            colorscale: 'Blues',\n                            reversescale: true,\n                            showscale: false,\n                            type: 'histogram2dcontour',\n                        },\n                    );\n                });\n\n                if (params.range.x.length > 0) {\n                    tmpDensityRange['xaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.x,\n                    };\n                }\n\n                if (params.range.y.length > 0) {\n                    tmpDensityRange['yaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.y,\n                    };\n                }\n\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            showlegend: false,\n                            hovermode: 'closest',\n                            bargap: 0,\n                            ...tmpDensityRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'bubble chart':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        mode: 'markers',\n                        name: v,\n                        marker: {\n                            color: 'rgb(93, 164, 214)',\n                            size: params.z,\n                        },\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n        }\n        return obj;\n    };\n\n    params.type.map((v) => {\n        tmpGraphProp = createPropData(tmpGraphProp, v, params);\n    });\n\n    Plotly.newPlot(element, tmpGraphProp.data, tmpGraphProp.layout);\n\n    if (params.func) {\n        element.on('plotly_relayout', params.func);\n    }\n}\n",
				"type": "system"
			}],
			"items": []
		}
	},
	{
		"analysis": {
			"script": {
				"db_id": null,
				"file_name": null,
				"script": null,
				"sql": "",
				"use_script": false
			},
			"setting": {
				"aggregation_default": {
					"type": "column",
					"val": null
				},
				"filter_default": [],
				"items": []
			},
			"type": "none"
		},
		"category": {
			"title": "logserver"
		},
		"convert": {
			"script": {
				"file_name": "convert_dr_header.py",
				"script": "from resource.script.convert_base import ConvertBase\r\n\r\nimport pandas as pd\r\nimport copy\r\nimport re\r\n\r\nconvert_columns = {\r\n    \"event_id\": \"event_id\",\r\n    \"event_time\": \"event_time\",\r\n    \"header1\": \"log_time\",\r\n    \"header2\": \"type\",\r\n    \"header3\": \"job_name\",\r\n    \"header4\": \"lot_id\",\r\n    \"header5\": \"plate_no\",\r\n    \"header6\": \"shot_no\",\r\n    \"header7\": \"cp\",\r\n    \"header8\": \"glass_id\",\r\n    \"header9\": \"expo_ready_psy\",\r\n    \"header10\": \"mpofs\",\r\n    \"header11\": \"final_aapsy\",\r\n    \"header12\": \"final_aapst\",\r\n    \"header13\": \"final_aamsy\",\r\n    \"header14\": \"auto_dr\",\r\n    \"header15\": \"auto_mr\",\r\n    \"header16\": \"final_aavs\",\r\n    \"header17\": \"interfero_of_sx\",\r\n    \"header18\": \"base\",\r\n    \"header19\": \"bdc_x\",\r\n    \"header20\": \"sdc_dr\",\r\n    \"header21\": \"adc_dr\",\r\n    \"header22\": \"sdc_yaw\",\r\n    \"header23\": \"bdc_yaw\",\r\n    \"header24\": \"adc_yaw\",\r\n    \"header25\": \"vs_comp\",\r\n    \"header26\": \"interferospan\",\r\n    \"header27\": \"yaw_dr\",\r\n    \"header28\": \"bar_rotate\",\r\n    \"header29\": \"mag_tilt_comp\",\r\n    \"header30\": \"mag_tilt_diffx\"\r\n}\r\n\r\n\r\nclass ConvertScript(ConvertBase):\r\n    \"\"\"\r\n    .. class:: ConvertScript\r\n\r\n        This class is for converting input file by user script.\r\n    \"\"\"\r\n\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> pd.DataFrame:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: DataFrame\r\n        \"\"\"\r\n        logDate = dict()\r\n        resultDate = list()\r\n        time_before = 0\r\n        time_cnt = 0\r\n        functionName = 'DRHeader'\r\n\r\n        # Read Log File\r\n        lines = self.readlines()\r\n\r\n        for line in lines:\r\n\r\n            # 改行コード等を除外した上で分割\r\n            linelog = line.strip().split(',')\r\n            i = 1\r\n            if not re.search('\\s*DRHD\\s*', linelog[1]):\r\n                continue\r\n\r\n            logDate[\"event_id\"] = functionName + \"Event\"\r\n            for etc in linelog:\r\n\r\n                if i == 1:\r\n                    # 2020/03/04 09:03:14　の形式を\r\n                    # 2020-03-04T09:03:14.000000+0900　の形式に変える\r\n                    # 日付と時間にわける\r\n                    date, time = etc.split(\" \")\r\n                    # 日付の年月日をわける\r\n                    year, month, day = date.split(\"/\")\r\n                    month = month.rjust(2, \"0\")\r\n                    day = day.rjust(2, \"0\")\r\n                    time = time + \":00\"\r\n                    tmp = year + \"-\" + month + \"-\" + day + \"T\" + time\r\n                    # 同じ時間の場合、ずらす（ずらさないとElasticSearchにデータが入らなくなるため）\r\n                    if time_before == etc:\r\n                        time_cnt += 1000\r\n                    else:\r\n                        time_before = etc\r\n                        time_cnt = 0\r\n                    data_cnt = str(time_cnt).rjust(6, \"0\")\r\n                    tmp = tmp + \".\" + data_cnt\r\n                    tmp = tmp + \"+0900\"\r\n                    logDate[\"event_time\"] = tmp\r\n\r\n                if '=' in etc:\r\n                    etc = etc[etc.find('=') + 1:]\r\n\r\n                if '\\\"' in etc:\r\n                    etc = etc.replace('\\\"', '')\r\n\r\n                if '\\t' in etc:\r\n                    etc = etc.replace('\\t', '')\r\n                # 対応するキーが存在しないため、header + 連番をキーにする\r\n                key = \"header\" + str(i)\r\n                logDate[key] = etc\r\n                i = i + 1\r\n\r\n            resultDate.append(copy.deepcopy(logDate))\r\n\r\n        df = pd.DataFrame(resultDate)\r\n        df.rename(columns=convert_columns, inplace=True)\r\n        df['log_time'] = pd.to_datetime(df['log_time'])\r\n\r\n        return df\r\n",
				"use_script": true
			}
		},
		"func": {
			"info": {
				"log_name": "DRHeader"
			},
			"script": {
				"file_name": "preprocess_dr_header.py",
				"script": "from resource.script.preprocess_base import PreprocessBase\r\n\r\n\r\nclass PreprocessScript(PreprocessBase):\r\n    \"\"\"\r\n    .. class:: PreprocessScript\r\n\r\n        This class is for preprocessing input file by user script.\r\n    \"\"\"\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> list:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: List of String\r\n        \"\"\"\r\n        lines = self.readlines()\r\n\r\n        ret_lines = list()\r\n\r\n        for line in lines:\r\n            if '\\\"' in line:\r\n                line = line.replace('\\\"', '')\r\n            ret_lines.append(line)\r\n\r\n        return ret_lines\r\n",
				"use_script": true
			},
			"source_type": "local",
			"title": "DRHeader",
			"system_func": true
		},
		"visualization": {
			"function_graph_type": [{
				"id": null,
				"name": "default",
				"script": "function renderGraph(Plotly, element, params) {\n    let tmpGraphProp = {};\n\n    const createPropData = (obj, type, params) => {\n        let tmpRange = {},\n            tmpDensityRange = {},\n            tmpData = [];\n\n        if (params.range.x.length > 0) {\n            tmpRange['xaxis'] = {\n                range: params.range.x,\n            };\n        }\n\n        if (params.range.y.length > 0) {\n            tmpRange['yaxis'] = {\n                range: params.range.y,\n            };\n        }\n\n        switch (type.toLowerCase()) {\n            case 'bar':\n            default:\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'bar',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'line':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'scatter',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'box plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        y: params.y[v],\n                        type: 'box',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'density plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push(\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            mode: 'markers',\n                            name: v,\n                            marker: {\n                                color: 'rgb(245,245,245)',\n                                size: 1.5,\n                                opacity: 0.7,\n                            },\n                            type: 'scatter',\n                        },\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            name: v,\n                            ncontours: 20,\n                            colorscale: 'Blues',\n                            reversescale: true,\n                            showscale: false,\n                            type: 'histogram2dcontour',\n                        },\n                    );\n                });\n\n                if (params.range.x.length > 0) {\n                    tmpDensityRange['xaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.x,\n                    };\n                }\n\n                if (params.range.y.length > 0) {\n                    tmpDensityRange['yaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.y,\n                    };\n                }\n\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            showlegend: false,\n                            hovermode: 'closest',\n                            bargap: 0,\n                            ...tmpDensityRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'bubble chart':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        mode: 'markers',\n                        name: v,\n                        marker: {\n                            color: 'rgb(93, 164, 214)',\n                            size: params.z,\n                        },\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n        }\n        return obj;\n    };\n\n    params.type.map((v) => {\n        tmpGraphProp = createPropData(tmpGraphProp, v, params);\n    });\n\n    Plotly.newPlot(element, tmpGraphProp.data, tmpGraphProp.layout);\n\n    if (params.func) {\n        element.on('plotly_relayout', params.func);\n    }\n}\n",
				"type": "system"
			}],
			"items": []
		}
	},
	{
		"analysis": {
			"script": {
				"db_id": null,
				"file_name": null,
				"script": null,
				"sql": "",
				"use_script": false
			},
			"setting": {
				"aggregation_default": {
					"type": "column",
					"val": null
				},
				"filter_default": [],
				"items": []
			},
			"type": "none"
		},
		"category": {
			"title": "logserver"
		},
		"convert": {
			"script": {
				"file_name": "convert_dr_table.py",
				"script": "from resource.script.convert_base import ConvertBase\r\n\r\nimport pandas as pd\r\nimport copy\r\nimport re\r\n\r\nconvert_columns = {\r\n    \"event_id\": \"event_id\",\r\n    \"event_time\": \"event_time\",\r\n    \"header1\": \"log_time\",\r\n    \"header2\": \"type\",\r\n    \"header3\": \"job_name\",\r\n    \"header4\": \"lot_id\",\r\n    \"header5\": \"plate_no\",\r\n    \"header6\": \"shot_no\",\r\n    \"header7\": \"cp\",\r\n    \"header8\": \"glass_id\",\r\n    \"header9\": \"psy\",\r\n    \"header10\": \"comp\",\r\n    \"header11\": \"bdc_x\",\r\n    \"header12\": \"sdc_dr\",\r\n    \"header13\": \"adc_dr\",\r\n    \"header14\": \"yaw_dr\",\r\n    \"header15\": \"auto_dr\",\r\n    \"header16\": \"bar_rotation\",\r\n    \"header17\": \"mag_tilt_comp\",\r\n    \"header18\": \"mag_tilt_diffx\"\r\n}\r\n\r\n\r\nclass ConvertScript(ConvertBase):\r\n    \"\"\"\r\n    .. class:: ConvertScript\r\n\r\n        This class is for converting input file by user script.\r\n    \"\"\"\r\n\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> pd.DataFrame:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: DataFrame\r\n        \"\"\"\r\n        logDate = dict()\r\n        resultDate = list()\r\n        time_before = 0\r\n        time_cnt = 0\r\n        functionName = 'DRTable'\r\n\r\n        # Read Log File\r\n        lines = self.readlines()\r\n\r\n        for line in lines:\r\n\r\n            # 改行コード等を除外した上で分割\r\n            linelog = line.strip().split(',')\r\n            i = 1\r\n            if not re.search('\\s*DRTB\\s*', linelog[1]):\r\n                continue\r\n\r\n            logDate[\"event_id\"] = functionName + \"Event\"\r\n            for etc in linelog:\r\n\r\n                if i == 1:\r\n                    # 2020/03/04 09:03:14　の形式を\r\n                    # 2020-03-04T09:03:14.000000+0900　の形式に変える\r\n                    # 日付と時間にわける\r\n                    date, time = etc.split(\" \")\r\n                    # 日付の年月日をわける\r\n                    year, month, day = date.split(\"/\")\r\n                    month = month.rjust(2, \"0\")\r\n                    day = day.rjust(2, \"0\")\r\n                    time = time + \":00\"\r\n                    tmp = year + \"-\" + month + \"-\" + day + \"T\" + time\r\n                    # 同じ時間の場合、ずらす（ずらさないとElasticSearchにデータが入らなくなるため）\r\n                    if time_before == etc:\r\n                        time_cnt += 1000\r\n                    else:\r\n                        time_before = etc\r\n                        time_cnt = 0\r\n                    data_cnt = str(time_cnt).rjust(6, \"0\")\r\n                    tmp = tmp + \".\" + data_cnt\r\n                    tmp = tmp + \"+0900\"\r\n                    logDate[\"event_time\"] = tmp\r\n\r\n                if '=' in etc:\r\n                    etc = etc[etc.find('=') + 1:]\r\n\r\n                if '\\\"' in etc:\r\n                    etc = etc.replace('\\\"', '')\r\n\r\n                if '\\t' in etc:\r\n                    etc = etc.replace('\\t', '')\r\n                # 対応するキーが存在しないため、header + 連番をキーにする\r\n                key = \"header\" + str(i)\r\n                logDate[key] = etc\r\n                i = i + 1\r\n\r\n            resultDate.append(copy.deepcopy(logDate))\r\n\r\n        df = pd.DataFrame(resultDate)\r\n        df.rename(columns=convert_columns, inplace=True)\r\n        df['log_time'] = pd.to_datetime(df['log_time'])\r\n\r\n        return df\r\n",
				"use_script": true
			}
		},
		"func": {
			"info": {
				"log_name": "DRTable"
			},
			"script": {
				"file_name": "preprocess_dr_table.py",
				"script": "from resource.script.preprocess_base import PreprocessBase\r\n\r\n\r\nclass PreprocessScript(PreprocessBase):\r\n    \"\"\"\r\n    .. class:: PreprocessScript\r\n\r\n        This class is for preprocessing input file by user script.\r\n    \"\"\"\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> list:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: List of String\r\n        \"\"\"\r\n        lines = self.readlines()\r\n\r\n        ret_lines = list()\r\n\r\n        for line in lines:\r\n            if '\\\"' in line:\r\n                line = line.replace('\\\"', '')\r\n            ret_lines.append(line)\r\n\r\n        return ret_lines\r\n",
				"use_script": true
			},
			"source_type": "local",
			"title": "DRTable",
			"system_func": true
		},
		"visualization": {
			"function_graph_type": [{
				"id": null,
				"name": "default",
				"script": "function renderGraph(Plotly, element, params) {\n    let tmpGraphProp = {};\n\n    const createPropData = (obj, type, params) => {\n        let tmpRange = {},\n            tmpDensityRange = {},\n            tmpData = [];\n\n        if (params.range.x.length > 0) {\n            tmpRange['xaxis'] = {\n                range: params.range.x,\n            };\n        }\n\n        if (params.range.y.length > 0) {\n            tmpRange['yaxis'] = {\n                range: params.range.y,\n            };\n        }\n\n        switch (type.toLowerCase()) {\n            case 'bar':\n            default:\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'bar',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'line':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'scatter',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'box plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        y: params.y[v],\n                        type: 'box',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'density plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push(\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            mode: 'markers',\n                            name: v,\n                            marker: {\n                                color: 'rgb(245,245,245)',\n                                size: 1.5,\n                                opacity: 0.7,\n                            },\n                            type: 'scatter',\n                        },\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            name: v,\n                            ncontours: 20,\n                            colorscale: 'Blues',\n                            reversescale: true,\n                            showscale: false,\n                            type: 'histogram2dcontour',\n                        },\n                    );\n                });\n\n                if (params.range.x.length > 0) {\n                    tmpDensityRange['xaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.x,\n                    };\n                }\n\n                if (params.range.y.length > 0) {\n                    tmpDensityRange['yaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.y,\n                    };\n                }\n\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            showlegend: false,\n                            hovermode: 'closest',\n                            bargap: 0,\n                            ...tmpDensityRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'bubble chart':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        mode: 'markers',\n                        name: v,\n                        marker: {\n                            color: 'rgb(93, 164, 214)',\n                            size: params.z,\n                        },\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n        }\n        return obj;\n    };\n\n    params.type.map((v) => {\n        tmpGraphProp = createPropData(tmpGraphProp, v, params);\n    });\n\n    Plotly.newPlot(element, tmpGraphProp.data, tmpGraphProp.layout);\n\n    if (params.func) {\n        element.on('plotly_relayout', params.func);\n    }\n}\n",
				"type": "system"
			}],
			"items": []
		}
	},
	{
		"analysis": {
			"script": {
				"db_id": null,
				"file_name": null,
				"script": null,
				"sql": "",
				"use_script": false
			},
			"setting": {
				"aggregation_default": {
					"type": "column",
					"val": null
				},
				"filter_default": [],
				"items": []
			},
			"type": "none"
		},
		"category": {
			"title": "logserver"
		},
		"convert": {
			"script": {
				"file_name": "convert_my_header.py",
				"script": "from resource.script.convert_base import ConvertBase\r\n\r\nimport pandas as pd\r\nimport copy\r\nimport re\r\n\r\nconvert_columns = {\r\n    \"event_id\": \"event_id\",\r\n    \"event_time\": \"event_time\",\r\n    \"header1\": \"log_time\",\r\n    \"header2\": \"type\",\r\n    \"header3\": \"job_name\",\r\n    \"header4\": \"lot_id\",\r\n    \"header5\": \"plate_no\",\r\n    \"header6\": \"shot_no\",\r\n    \"header7\": \"cp\",\r\n    \"header8\": \"glass_id\",\r\n    \"header9\": \"expo_ready_psx\",\r\n    \"header10\": \"expo_ready_psy\",\r\n    \"header11\": \"final_aapsy\",\r\n    \"header12\": \"final_aapst\",\r\n    \"header13\": \"final_aamsy\",\r\n    \"header14\": \"arc_my\",\r\n    \"header15\": \"interfero_ofsy\",\r\n    \"header16\": \"mp_ofs\",\r\n    \"header17\": \"base\",\r\n    \"header18\": \"bdc_y\",\r\n    \"header19\": \"sdc_my\",\r\n    \"header20\": \"adc_my\",\r\n    \"header21\": \"sdc_yaw\",\r\n    \"header22\": \"bdc_yaw\",\r\n    \"header23\": \"adc_yaw\",\r\n    \"header24\": \"yaw_my\",\r\n    \"header25\": \"mag_x\",\r\n    \"header26\": \"mag_y\",\r\n    \"header27\": \"magxy_shift\",\r\n    \"header28\": \"magyy_shift\",\r\n    \"header29\": \"mag_tilt_comp\",\r\n    \"header30\": \"mag_tilt_diffy\"\r\n}\r\n\r\n\r\nclass ConvertScript(ConvertBase):\r\n    \"\"\"\r\n    .. class:: ConvertScript\r\n\r\n        This class is for converting input file by user script.\r\n    \"\"\"\r\n\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> pd.DataFrame:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: DataFrame\r\n        \"\"\"\r\n        logDate = dict()\r\n        resultDate = list()\r\n        time_before = 0\r\n        time_cnt = 0\r\n        functionName = 'MYHeader'\r\n\r\n        # Read Log File\r\n        lines = self.readlines()\r\n\r\n        for line in lines:\r\n\r\n            # 改行コード等を除外した上で分割\r\n            linelog = line.strip().split(',')\r\n            i = 1\r\n            if not re.search('\\s*MYHD\\s*', linelog[1]):\r\n                continue\r\n\r\n            logDate[\"event_id\"] = functionName + \"Event\"\r\n            for etc in linelog:\r\n\r\n                if i == 1:\r\n                    # 2020/03/04 09:03:14　の形式を\r\n                    # 2020-03-04T09:03:14.000000+0900　の形式に変える\r\n                    # 日付と時間にわける\r\n                    date, time = etc.split(\" \")\r\n                    # 日付の年月日をわける\r\n                    year, month, day = date.split(\"/\")\r\n                    month = month.rjust(2, \"0\")\r\n                    day = day.rjust(2, \"0\")\r\n                    time = time + \":00\"\r\n                    tmp = year + \"-\" + month + \"-\" + day + \"T\" + time\r\n                    # 同じ時間の場合、ずらす（ずらさないとElasticSearchにデータが入らなくなるため）\r\n                    if time_before == etc:\r\n                        time_cnt += 1000\r\n                    else:\r\n                        time_before = etc\r\n                        time_cnt = 0\r\n                    data_cnt = str(time_cnt).rjust(6, \"0\")\r\n                    tmp = tmp + \".\" + data_cnt\r\n                    tmp = tmp + \"+0900\"\r\n                    logDate[\"event_time\"] = tmp\r\n\r\n                if '=' in etc:\r\n                    etc = etc[etc.find('=') + 1:]\r\n\r\n                if '\\\"' in etc:\r\n                    etc = etc.replace('\\\"', '')\r\n\r\n                if '\\t' in etc:\r\n                    etc = etc.replace('\\t', '')\r\n                # 対応するキーが存在しないため、header + 連番をキーにする\r\n                key = \"header\" + str(i)\r\n                logDate[key] = etc\r\n                i = i + 1\r\n\r\n            resultDate.append(copy.deepcopy(logDate))\r\n\r\n        df = pd.DataFrame(resultDate)\r\n        df.rename(columns=convert_columns, inplace=True)\r\n        df['log_time'] = pd.to_datetime(df['log_time'])\r\n\r\n        return df\r\n",
				"use_script": true
			}
		},
		"func": {
			"info": {
				"log_name": "MYHeader"
			},
			"script": {
				"file_name": "preprocess_my_header.py",
				"script": "from resource.script.preprocess_base import PreprocessBase\r\n\r\n\r\nclass PreprocessScript(PreprocessBase):\r\n    \"\"\"\r\n    .. class:: PreprocessScript\r\n\r\n        This class is for preprocessing input file by user script.\r\n    \"\"\"\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> list:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: List of String\r\n        \"\"\"\r\n        lines = self.readlines()\r\n\r\n        ret_lines = list()\r\n\r\n        for line in lines:\r\n            if '\\\"' in line:\r\n                line = line.replace('\\\"', '')\r\n            ret_lines.append(line)\r\n\r\n        return ret_lines\r\n",
				"use_script": true
			},
			"source_type": "local",
			"title": "MYHeader",
			"system_func": true
		},
		"visualization": {
			"function_graph_type": [{
				"id": null,
				"name": "default",
				"script": "function renderGraph(Plotly, element, params) {\n    let tmpGraphProp = {};\n\n    const createPropData = (obj, type, params) => {\n        let tmpRange = {},\n            tmpDensityRange = {},\n            tmpData = [];\n\n        if (params.range.x.length > 0) {\n            tmpRange['xaxis'] = {\n                range: params.range.x,\n            };\n        }\n\n        if (params.range.y.length > 0) {\n            tmpRange['yaxis'] = {\n                range: params.range.y,\n            };\n        }\n\n        switch (type.toLowerCase()) {\n            case 'bar':\n            default:\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'bar',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'line':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'scatter',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'box plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        y: params.y[v],\n                        type: 'box',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'density plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push(\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            mode: 'markers',\n                            name: v,\n                            marker: {\n                                color: 'rgb(245,245,245)',\n                                size: 1.5,\n                                opacity: 0.7,\n                            },\n                            type: 'scatter',\n                        },\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            name: v,\n                            ncontours: 20,\n                            colorscale: 'Blues',\n                            reversescale: true,\n                            showscale: false,\n                            type: 'histogram2dcontour',\n                        },\n                    );\n                });\n\n                if (params.range.x.length > 0) {\n                    tmpDensityRange['xaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.x,\n                    };\n                }\n\n                if (params.range.y.length > 0) {\n                    tmpDensityRange['yaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.y,\n                    };\n                }\n\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            showlegend: false,\n                            hovermode: 'closest',\n                            bargap: 0,\n                            ...tmpDensityRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'bubble chart':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        mode: 'markers',\n                        name: v,\n                        marker: {\n                            color: 'rgb(93, 164, 214)',\n                            size: params.z,\n                        },\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n        }\n        return obj;\n    };\n\n    params.type.map((v) => {\n        tmpGraphProp = createPropData(tmpGraphProp, v, params);\n    });\n\n    Plotly.newPlot(element, tmpGraphProp.data, tmpGraphProp.layout);\n\n    if (params.func) {\n        element.on('plotly_relayout', params.func);\n    }\n}\n",
				"type": "system"
			}],
			"items": []
		}
	},
	{
		"analysis": {
			"script": {
				"db_id": null,
				"file_name": null,
				"script": null,
				"sql": "",
				"use_script": false
			},
			"setting": {
				"aggregation_default": {
					"type": "column",
					"val": null
				},
				"filter_default": [],
				"items": []
			},
			"type": "none"
		},
		"category": {
			"title": "logserver"
		},
		"convert": {
			"script": {
				"file_name": "convert_my_table.py",
				"script": "from resource.script.convert_base import ConvertBase\r\n\r\nimport pandas as pd\r\nimport copy\r\nimport re\r\n\r\nconvert_columns = {\r\n    \"event_id\": \"event_id\",\r\n    \"event_time\": \"event_time\",\r\n    \"header1\": \"log_time\",\r\n    \"header2\": \"type\",\r\n    \"header3\": \"job_name\",\r\n    \"header4\": \"lot_id\",\r\n    \"header5\": \"plate_no\",\r\n    \"header6\": \"shot_no\",\r\n    \"header7\": \"cp\",\r\n    \"header8\": \"glass_id\",\r\n    \"header9\": \"psy\",\r\n    \"header10\": \"comp\",\r\n    \"header11\": \"bdc_y\",\r\n    \"header12\": \"sdc_my\",\r\n    \"header13\": \"adc_my\",\r\n    \"header14\": \"yaw_my\",\r\n    \"header15\": \"mag_x\",\r\n    \"header16\": \"mag_y\",\r\n    \"header17\": \"magxy_shift\",\r\n    \"header18\": \"magyy_shift\",\r\n    \"header19\": \"mag_tilt_comp\",\r\n    \"header20\": \"mag_tilt_diffy\"\r\n}\r\n\r\n\r\nclass ConvertScript(ConvertBase):\r\n    \"\"\"\r\n    .. class:: ConvertScript\r\n\r\n        This class is for converting input file by user script.\r\n    \"\"\"\r\n\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> pd.DataFrame:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: DataFrame\r\n        \"\"\"\r\n        logDate = dict()\r\n        resultDate = list()\r\n        time_before = 0\r\n        time_cnt = 0\r\n        functionName = 'MYTable'\r\n\r\n        # Read Log File\r\n        lines = self.readlines()\r\n\r\n        for line in lines:\r\n\r\n            # 改行コード等を除外した上で分割\r\n            linelog = line.strip().split(',')\r\n            i = 1\r\n            if not re.search('\\s*MYTB\\s*', linelog[1]):\r\n                continue\r\n\r\n            logDate[\"event_id\"] = functionName + \"Event\"\r\n            for etc in linelog:\r\n\r\n                if i == 1:\r\n                    # 2020/03/04 09:03:14　の形式を\r\n                    # 2020-03-04T09:03:14.000000+0900　の形式に変える\r\n                    # 日付と時間にわける\r\n                    date, time = etc.split(\" \")\r\n                    # 日付の年月日をわける\r\n                    year, month, day = date.split(\"/\")\r\n                    month = month.rjust(2, \"0\")\r\n                    day = day.rjust(2, \"0\")\r\n                    time = time + \":00\"\r\n                    tmp = year + \"-\" + month + \"-\" + day + \"T\" + time\r\n                    # 同じ時間の場合、ずらす（ずらさないとElasticSearchにデータが入らなくなるため）\r\n                    if time_before == etc:\r\n                        time_cnt += 1000\r\n                    else:\r\n                        time_before = etc\r\n                        time_cnt = 0\r\n                    data_cnt = str(time_cnt).rjust(6, \"0\")\r\n                    tmp = tmp + \".\" + data_cnt\r\n                    tmp = tmp + \"+0900\"\r\n                    logDate[\"event_time\"] = tmp\r\n\r\n                if '=' in etc:\r\n                    etc = etc[etc.find('=') + 1:]\r\n\r\n                if '\\\"' in etc:\r\n                    etc = etc.replace('\\\"', '')\r\n\r\n                if '\\t' in etc:\r\n                    etc = etc.replace('\\t', '')\r\n                # 対応するキーが存在しないため、header + 連番をキーにする\r\n                key = \"header\" + str(i)\r\n                logDate[key] = etc\r\n                i = i + 1\r\n\r\n            resultDate.append(copy.deepcopy(logDate))\r\n\r\n        df = pd.DataFrame(resultDate)\r\n        df.rename(columns=convert_columns, inplace=True)\r\n        df['log_time'] = pd.to_datetime(df['log_time'])\r\n\r\n        return df\r\n",
				"use_script": true
			}
		},
		"func": {
			"info": {
				"log_name": "MYTable"
			},
			"script": {
				"file_name": "preprocess_my_table.py",
				"script": "from resource.script.preprocess_base import PreprocessBase\r\n\r\n\r\nclass PreprocessScript(PreprocessBase):\r\n    \"\"\"\r\n    .. class:: PreprocessScript\r\n\r\n        This class is for preprocessing input file by user script.\r\n    \"\"\"\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> list:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: List of String\r\n        \"\"\"\r\n        lines = self.readlines()\r\n\r\n        ret_lines = list()\r\n\r\n        for line in lines:\r\n            if '\\\"' in line:\r\n                line = line.replace('\\\"', '')\r\n            ret_lines.append(line)\r\n\r\n        return ret_lines\r\n",
				"use_script": true
			},
			"source_type": "local",
			"title": "MYTable",
			"system_func": true
		},
		"visualization": {
			"function_graph_type": [{
				"id": null,
				"name": "default",
				"script": "function renderGraph(Plotly, element, params) {\n    let tmpGraphProp = {};\n\n    const createPropData = (obj, type, params) => {\n        let tmpRange = {},\n            tmpDensityRange = {},\n            tmpData = [];\n\n        if (params.range.x.length > 0) {\n            tmpRange['xaxis'] = {\n                range: params.range.x,\n            };\n        }\n\n        if (params.range.y.length > 0) {\n            tmpRange['yaxis'] = {\n                range: params.range.y,\n            };\n        }\n\n        switch (type.toLowerCase()) {\n            case 'bar':\n            default:\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'bar',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'line':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'scatter',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'box plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        y: params.y[v],\n                        type: 'box',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'density plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push(\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            mode: 'markers',\n                            name: v,\n                            marker: {\n                                color: 'rgb(245,245,245)',\n                                size: 1.5,\n                                opacity: 0.7,\n                            },\n                            type: 'scatter',\n                        },\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            name: v,\n                            ncontours: 20,\n                            colorscale: 'Blues',\n                            reversescale: true,\n                            showscale: false,\n                            type: 'histogram2dcontour',\n                        },\n                    );\n                });\n\n                if (params.range.x.length > 0) {\n                    tmpDensityRange['xaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.x,\n                    };\n                }\n\n                if (params.range.y.length > 0) {\n                    tmpDensityRange['yaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.y,\n                    };\n                }\n\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            showlegend: false,\n                            hovermode: 'closest',\n                            bargap: 0,\n                            ...tmpDensityRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'bubble chart':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        mode: 'markers',\n                        name: v,\n                        marker: {\n                            color: 'rgb(93, 164, 214)',\n                            size: params.z,\n                        },\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n        }\n        return obj;\n    };\n\n    params.type.map((v) => {\n        tmpGraphProp = createPropData(tmpGraphProp, v, params);\n    });\n\n    Plotly.newPlot(element, tmpGraphProp.data, tmpGraphProp.layout);\n\n    if (params.func) {\n        element.on('plotly_relayout', params.func);\n    }\n}\n",
				"type": "system"
			}],
			"items": []
		}
	},
	{
		"analysis": {
			"script": {
				"db_id": null,
				"file_name": null,
				"script": null,
				"sql": "",
				"use_script": false
			},
			"setting": {
				"aggregation_default": {
					"type": "column",
					"val": null
				},
				"filter_default": [],
				"items": []
			},
			"type": "none"
		},
		"category": {
			"title": "logserver"
		},
		"convert": {
			"script": {
				"file_name": "convert_offset_table.py",
				"script": "from resource.script.convert_base import ConvertBase\r\n\r\nimport pandas as pd\r\nimport copy\r\nimport re\r\n\r\nconvert_columns = {\r\n    \"event_id\": \"event_id\",\r\n    \"event_time\": \"event_time\",\r\n    \"header1\": \"log_time\",\r\n    \"header2\": \"type\",\r\n    \"header3\": \"job_name\",\r\n    \"header4\": \"lot_id\",\r\n    \"header5\": \"plate_no\",\r\n    \"header6\": \"shot_no\",\r\n    # \"header7\": \"cp\",\r\n    \"header8\": \"glass_id\",\r\n    \"header9\": \"pos\",\r\n    \"header10\": \"offset_xl\",\r\n    \"header11\": \"offset_yl\",\r\n    \"header12\": \"offset_xr\",\r\n    \"header13\": \"offset_yr\",\r\n    \"header14\": \"offset_arc\",\r\n    \"header15\": \"xmag_pitch\",\r\n    \"header16\": \"xmag_roll\",\r\n    \"header17\": \"imag_pitch\",\r\n    \"header18\": \"imag_roll\",\r\n    \"header19\": \"ymag_pitch\",\r\n    \"header20\": \"ymag_roll\",\r\n    \"header21\": \"mag_tilt_xl\",\r\n    \"header22\": \"mag_tilt_yl\",\r\n    \"header23\": \"mag_tilt_xr\",\r\n    \"header24\": \"mag_tilt_yr\",\r\n    \"header25\": \"mag_tilt_mx\",\r\n    \"header26\": \"mag_tilt_arc\",\r\n    \"header27\": \"cp\",\r\n    \"header28\": \"vs\",\r\n    \"header29\": \"mode\",\r\n    \"header30\": \"expo_left\",\r\n    \"header31\": \"expo_right\",\r\n    \"header32\": \"il_mode\",\r\n    \"header33\": \"logical_posx\",\r\n    \"header34\": \"logical_posy\",\r\n    \"header35\": \"logical_post\"\r\n}\r\n\r\n\r\nclass ConvertScript(ConvertBase):\r\n    \"\"\"\r\n    .. class:: ConvertScript\r\n\r\n        This class is for converting input file by user script.\r\n    \"\"\"\r\n\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> pd.DataFrame:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: DataFrame\r\n        \"\"\"\r\n        logDate = dict()\r\n        resultDate = list()\r\n        time_before = 0\r\n        time_cnt = 0\r\n        functionName = 'OffsetTable'\r\n\r\n        # Read Log File\r\n        lines = self.readlines()\r\n\r\n        for line in lines:\r\n\r\n            # 改行コード等を除外した上で分割\r\n            linelog = line.strip().split(',')\r\n            i = 1\r\n            if not re.search('\\s*OFSTB\\s*', linelog[1]):\r\n                continue\r\n\r\n            logDate[\"event_id\"] = functionName + \"Event\"\r\n            for etc in linelog:\r\n\r\n                if i == 1:\r\n                    # 2020/03/04 09:03:14　の形式を\r\n                    # 2020-03-04T09:03:14.000000+0900　の形式に変える\r\n                    # 日付と時間にわける\r\n                    date, time = etc.split(\" \")\r\n                    # 日付の年月日をわける\r\n                    year, month, day = date.split(\"/\")\r\n                    month = month.rjust(2, \"0\")\r\n                    day = day.rjust(2, \"0\")\r\n                    time = time + \":00\"\r\n                    tmp = year + \"-\" + month + \"-\" + day + \"T\" + time\r\n                    # 同じ時間の場合、ずらす（ずらさないとElasticSearchにデータが入らなくなるため）\r\n                    if time_before == etc:\r\n                        time_cnt += 1000\r\n                    else:\r\n                        time_before = etc\r\n                        time_cnt = 0\r\n                    data_cnt = str(time_cnt).rjust(6, \"0\")\r\n                    tmp = tmp + \".\" + data_cnt\r\n                    tmp = tmp + \"+0900\"\r\n                    logDate[\"event_time\"] = tmp\r\n\r\n                if '=' in etc:\r\n                    etc = etc[etc.find('=') + 1:]\r\n\r\n                if '\\\"' in etc:\r\n                    etc = etc.replace('\\\"', '')\r\n\r\n                if '\\t' in etc:\r\n                    etc = etc.replace('\\t', '')\r\n\r\n                # 対応するキーが存在しないため、header + 連番をキーにする\r\n                key = \"header\" + str(i)\r\n                logDate[key] = etc\r\n                i = i + 1\r\n\r\n            resultDate.append(copy.deepcopy(logDate))\r\n\r\n        df = pd.DataFrame(resultDate)\r\n        df.rename(columns=convert_columns, inplace=True)\r\n        df['log_time'] = pd.to_datetime(df['log_time'])\r\n\r\n        return df\r\n",
				"use_script": true
			}
		},
		"func": {
			"info": {
				"log_name": "OffsetTable"
			},
			"script": {
				"file_name": "preprocess_offset_table.py",
				"script": "from resource.script.preprocess_base import PreprocessBase\r\n\r\n\r\nclass PreprocessScript(PreprocessBase):\r\n    \"\"\"\r\n    .. class:: PreprocessScript\r\n\r\n        This class is for preprocessing input file by user script.\r\n    \"\"\"\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> list:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: List of String\r\n        \"\"\"\r\n        lines = self.readlines()\r\n\r\n        ret_lines = list()\r\n\r\n        for line in lines:\r\n            if '\\\"' in line:\r\n                line = line.replace('\\\"', '')\r\n            ret_lines.append(line)\r\n\r\n        return ret_lines\r\n",
				"use_script": true
			},
			"source_type": "local",
			"title": "OffsetTable",
			"system_func": true
		},
		"visualization": {
			"function_graph_type": [{
				"id": null,
				"name": "default",
				"script": "function renderGraph(Plotly, element, params) {\n    let tmpGraphProp = {};\n\n    const createPropData = (obj, type, params) => {\n        let tmpRange = {},\n            tmpDensityRange = {},\n            tmpData = [];\n\n        if (params.range.x.length > 0) {\n            tmpRange['xaxis'] = {\n                range: params.range.x,\n            };\n        }\n\n        if (params.range.y.length > 0) {\n            tmpRange['yaxis'] = {\n                range: params.range.y,\n            };\n        }\n\n        switch (type.toLowerCase()) {\n            case 'bar':\n            default:\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'bar',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'line':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'scatter',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'box plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        y: params.y[v],\n                        type: 'box',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'density plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push(\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            mode: 'markers',\n                            name: v,\n                            marker: {\n                                color: 'rgb(245,245,245)',\n                                size: 1.5,\n                                opacity: 0.7,\n                            },\n                            type: 'scatter',\n                        },\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            name: v,\n                            ncontours: 20,\n                            colorscale: 'Blues',\n                            reversescale: true,\n                            showscale: false,\n                            type: 'histogram2dcontour',\n                        },\n                    );\n                });\n\n                if (params.range.x.length > 0) {\n                    tmpDensityRange['xaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.x,\n                    };\n                }\n\n                if (params.range.y.length > 0) {\n                    tmpDensityRange['yaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.y,\n                    };\n                }\n\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            showlegend: false,\n                            hovermode: 'closest',\n                            bargap: 0,\n                            ...tmpDensityRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'bubble chart':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        mode: 'markers',\n                        name: v,\n                        marker: {\n                            color: 'rgb(93, 164, 214)',\n                            size: params.z,\n                        },\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n        }\n        return obj;\n    };\n\n    params.type.map((v) => {\n        tmpGraphProp = createPropData(tmpGraphProp, v, params);\n    });\n\n    Plotly.newPlot(element, tmpGraphProp.data, tmpGraphProp.layout);\n\n    if (params.func) {\n        element.on('plotly_relayout', params.func);\n    }\n}\n",
				"type": "system"
			}],
			"items": []
		}
	},
	{
		"analysis": {
			"script": {
				"db_id": null,
				"file_name": null,
				"script": null,
				"sql": "",
				"use_script": false
			},
			"setting": {
				"aggregation_default": {
					"type": "column",
					"val": null
				},
				"filter_default": [],
				"items": []
			},
			"type": "none"
		},
		"category": {
			"title": "logserver"
		},
		"convert": {
			"script": {
				"file_name": "convert_yaw_header.py",
				"script": "from resource.script.convert_base import ConvertBase\r\n\r\nimport pandas as pd\r\nimport copy\r\nimport re\r\n\r\nconvert_columns = {\r\n    \"event_id\": \"event_id\",\r\n    \"event_time\": \"event_time\",\r\n    \"header1\": \"log_time\",\r\n    \"header2\": \"type\",\r\n    \"header3\": \"job_name\",\r\n    \"header4\": \"lot_id\",\r\n    \"header5\": \"plate_no\",\r\n    \"header6\": \"shot_no\",\r\n    \"header7\": \"cp\",\r\n    \"header8\": \"glass_id\",\r\n    \"header9\": \"expo_ready_psx\",\r\n    \"header10\": \"expo_ready_psy\",\r\n    \"header11\": \"expo_ready_msy\",\r\n    \"header12\": \"base\",\r\n    \"header13\": \"sdc_yaw\",\r\n    \"header14\": \"adc_yaw\",\r\n    \"header15\": \"bdc_t\"\r\n}\r\n\r\n\r\nclass ConvertScript(ConvertBase):\r\n    \"\"\"\r\n    .. class:: ConvertScript\r\n\r\n        This class is for converting input file by user script.\r\n    \"\"\"\r\n\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> pd.DataFrame:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: DataFrame\r\n        \"\"\"\r\n        logDate = dict()\r\n        resultDate = list()\r\n        time_before = 0\r\n        time_cnt = 0\r\n        functionName = 'YawHeader'\r\n\r\n        # Read Log File\r\n        lines = self.readlines()\r\n\r\n        for line in lines:\r\n\r\n            # 改行コード等を除外した上で分割\r\n            linelog = line.strip().split(',')\r\n            i = 1\r\n            if not re.search('\\s*YAWHD\\s*', linelog[1]):\r\n                continue\r\n\r\n            logDate[\"event_id\"] = functionName + \"Event\"\r\n            for etc in linelog:\r\n\r\n                if i == 1:\r\n                    # 2020/03/04 09:03:14　の形式を\r\n                    # 2020-03-04T09:03:14.000000+0900　の形式に変える\r\n                    # 日付と時間にわける\r\n                    date, time = etc.split(\" \")\r\n                    # 日付の年月日をわける\r\n                    year, month, day = date.split(\"/\")\r\n                    month = month.rjust(2, \"0\")\r\n                    day = day.rjust(2, \"0\")\r\n                    time = time + \":00\"\r\n                    tmp = year + \"-\" + month + \"-\" + day + \"T\" + time\r\n                    # 同じ時間の場合、ずらす（ずらさないとElasticSearchにデータが入らなくなるため）\r\n                    if time_before == etc:\r\n                        time_cnt += 1000\r\n                    else:\r\n                        time_before = etc\r\n                        time_cnt = 0\r\n                    data_cnt = str(time_cnt).rjust(6, \"0\")\r\n                    tmp = tmp + \".\" + data_cnt\r\n                    tmp = tmp + \"+0900\"\r\n                    logDate[\"event_time\"] = tmp\r\n\r\n                if '=' in etc:\r\n                    etc = etc[etc.find('=') + 1:]\r\n\r\n                if '\\\"' in etc:\r\n                    etc = etc.replace('\\\"', '')\r\n\r\n                if '\\t' in etc:\r\n                    etc = etc.replace('\\t', '')\r\n                # 対応するキーが存在しないため、header + 連番をキーにする\r\n                key = \"header\" + str(i)\r\n                logDate[key] = etc\r\n                i = i + 1\r\n\r\n            resultDate.append(copy.deepcopy(logDate))\r\n\r\n        df = pd.DataFrame(resultDate)\r\n        df.rename(columns=convert_columns, inplace=True)\r\n        df['log_time'] = pd.to_datetime(df['log_time'])\r\n\r\n        return df\r\n",
				"use_script": true
			}
		},
		"func": {
			"info": {
				"log_name": "YawHeader"
			},
			"script": {
				"file_name": "preprocess_yaw_header.py",
				"script": "from resource.script.preprocess_base import PreprocessBase\r\n\r\n\r\nclass PreprocessScript(PreprocessBase):\r\n    \"\"\"\r\n    .. class:: PreprocessScript\r\n\r\n        This class is for preprocessing input file by user script.\r\n    \"\"\"\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> list:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: List of String\r\n        \"\"\"\r\n        lines = self.readlines()\r\n\r\n        ret_lines = list()\r\n\r\n        for line in lines:\r\n            if '\\\"' in line:\r\n                line = line.replace('\\\"', '')\r\n            ret_lines.append(line)\r\n\r\n        return ret_lines\r\n",
				"use_script": true
			},
			"source_type": "local",
			"title": "YawHeader",
			"system_func": true
		},
		"visualization": {
			"function_graph_type": [{
				"id": null,
				"name": "default",
				"script": "function renderGraph(Plotly, element, params) {\n    let tmpGraphProp = {};\n\n    const createPropData = (obj, type, params) => {\n        let tmpRange = {},\n            tmpDensityRange = {},\n            tmpData = [];\n\n        if (params.range.x.length > 0) {\n            tmpRange['xaxis'] = {\n                range: params.range.x,\n            };\n        }\n\n        if (params.range.y.length > 0) {\n            tmpRange['yaxis'] = {\n                range: params.range.y,\n            };\n        }\n\n        switch (type.toLowerCase()) {\n            case 'bar':\n            default:\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'bar',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'line':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'scatter',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'box plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        y: params.y[v],\n                        type: 'box',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'density plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push(\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            mode: 'markers',\n                            name: v,\n                            marker: {\n                                color: 'rgb(245,245,245)',\n                                size: 1.5,\n                                opacity: 0.7,\n                            },\n                            type: 'scatter',\n                        },\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            name: v,\n                            ncontours: 20,\n                            colorscale: 'Blues',\n                            reversescale: true,\n                            showscale: false,\n                            type: 'histogram2dcontour',\n                        },\n                    );\n                });\n\n                if (params.range.x.length > 0) {\n                    tmpDensityRange['xaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.x,\n                    };\n                }\n\n                if (params.range.y.length > 0) {\n                    tmpDensityRange['yaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.y,\n                    };\n                }\n\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            showlegend: false,\n                            hovermode: 'closest',\n                            bargap: 0,\n                            ...tmpDensityRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'bubble chart':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        mode: 'markers',\n                        name: v,\n                        marker: {\n                            color: 'rgb(93, 164, 214)',\n                            size: params.z,\n                        },\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n        }\n        return obj;\n    };\n\n    params.type.map((v) => {\n        tmpGraphProp = createPropData(tmpGraphProp, v, params);\n    });\n\n    Plotly.newPlot(element, tmpGraphProp.data, tmpGraphProp.layout);\n\n    if (params.func) {\n        element.on('plotly_relayout', params.func);\n    }\n}\n",
				"type": "system"
			}],
			"items": []
		}
	},
	{
		"analysis": {
			"script": {
				"db_id": null,
				"file_name": null,
				"script": null,
				"sql": "",
				"use_script": false
			},
			"setting": {
				"aggregation_default": {
					"type": "column",
					"val": null
				},
				"filter_default": [],
				"items": []
			},
			"type": "none"
		},
		"category": {
			"title": "logserver"
		},
		"convert": {
			"script": {
				"file_name": "convert_yaw_table.py",
				"script": "from resource.script.convert_base import ConvertBase\r\n\r\nimport pandas as pd\r\nimport copy\r\nimport re\r\n\r\nconvert_columns = {\r\n    \"event_id\": \"event_id\",\r\n    \"event_time\": \"event_time\",\r\n    \"header1\": \"log_time\",\r\n    \"header2\": \"type\",\r\n    \"header3\": \"job_name\",\r\n    \"header4\": \"lot_id\",\r\n    \"header5\": \"plate_no\",\r\n    \"header6\": \"shot_no\",\r\n    \"header7\": \"cp\",\r\n    \"header8\": \"glass_id\",\r\n    \"header9\": \"psy\",\r\n    \"header10\": \"comp\",\r\n    \"header11\": \"sdc_yaw\",\r\n    \"header12\": \"adc_yaw\",\r\n    \"header13\": \"bdc_t\"\r\n}\r\n\r\n\r\nclass ConvertScript(ConvertBase):\r\n    \"\"\"\r\n    .. class:: ConvertScript\r\n\r\n        This class is for converting input file by user script.\r\n    \"\"\"\r\n\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> pd.DataFrame:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: DataFrame\r\n        \"\"\"\r\n        logDate = dict()\r\n        resultDate = list()\r\n        time_before = 0\r\n        time_cnt = 0\r\n        functionName = 'YawTable'\r\n\r\n        # Read Log File\r\n        lines = self.readlines()\r\n\r\n        for line in lines:\r\n\r\n            # 改行コード等を除外した上で分割\r\n            linelog = line.strip().split(',')\r\n            i = 1\r\n            if not re.search('\\s*YAWTB\\s*', linelog[1]):\r\n                continue\r\n\r\n            logDate[\"event_id\"] = functionName + \"Event\"\r\n            for etc in linelog:\r\n\r\n                if i == 1:\r\n                    # 2020/03/04 09:03:14　の形式を\r\n                    # 2020-03-04T09:03:14.000000+0900　の形式に変える\r\n                    # 日付と時間にわける\r\n                    date, time = etc.split(\" \")\r\n                    # 日付の年月日をわける\r\n                    year, month, day = date.split(\"/\")\r\n                    month = month.rjust(2, \"0\")\r\n                    day = day.rjust(2, \"0\")\r\n                    time = time + \":00\"\r\n                    tmp = year + \"-\" + month + \"-\" + day + \"T\" + time\r\n                    # 同じ時間の場合、ずらす（ずらさないとElasticSearchにデータが入らなくなるため）\r\n                    if time_before == etc:\r\n                        time_cnt += 1000\r\n                    else:\r\n                        time_before = etc\r\n                        time_cnt = 0\r\n                    data_cnt = str(time_cnt).rjust(6, \"0\")\r\n                    tmp = tmp + \".\" + data_cnt\r\n                    tmp = tmp + \"+0900\"\r\n                    logDate[\"event_time\"] = tmp\r\n\r\n                if '=' in etc:\r\n                    etc = etc[etc.find('=') + 1:]\r\n\r\n                if '\\\"' in etc:\r\n                    etc = etc.replace('\\\"', '')\r\n\r\n                if '\\t' in etc:\r\n                    etc = etc.replace('\\t', '')\r\n                # 対応するキーが存在しないため、header + 連番をキーにする\r\n                key = \"header\" + str(i)\r\n                logDate[key] = etc\r\n                i = i + 1\r\n\r\n            resultDate.append(copy.deepcopy(logDate))\r\n\r\n        df = pd.DataFrame(resultDate)\r\n        df.rename(columns=convert_columns, inplace=True)\r\n        df['log_time'] = pd.to_datetime(df['log_time'])\r\n\r\n        return df\r\n",
				"use_script": true
			}
		},
		"func": {
			"info": {
				"log_name": "YawTable"
			},
			"script": {
				"file_name": "preprocess_yaw_table.py",
				"script": "from resource.script.preprocess_base import PreprocessBase\r\n\r\n\r\nclass PreprocessScript(PreprocessBase):\r\n    \"\"\"\r\n    .. class:: PreprocessScript\r\n\r\n        This class is for preprocessing input file by user script.\r\n    \"\"\"\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> list:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: List of String\r\n        \"\"\"\r\n        lines = self.readlines()\r\n\r\n        ret_lines = list()\r\n\r\n        for line in lines:\r\n            if '\\\"' in line:\r\n                line = line.replace('\\\"', '')\r\n            ret_lines.append(line)\r\n\r\n        return ret_lines\r\n",
				"use_script": true
			},
			"source_type": "local",
			"title": "YawTable",
			"system_func": true
		},
		"visualization": {
			"function_graph_type": [{
				"id": null,
				"name": "default",
				"script": "function renderGraph(Plotly, element, params) {\n    let tmpGraphProp = {};\n\n    const createPropData = (obj, type, params) => {\n        let tmpRange = {},\n            tmpDensityRange = {},\n            tmpData = [];\n\n        if (params.range.x.length > 0) {\n            tmpRange['xaxis'] = {\n                range: params.range.x,\n            };\n        }\n\n        if (params.range.y.length > 0) {\n            tmpRange['yaxis'] = {\n                range: params.range.y,\n            };\n        }\n\n        switch (type.toLowerCase()) {\n            case 'bar':\n            default:\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'bar',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'line':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'scatter',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'box plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        y: params.y[v],\n                        type: 'box',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'density plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push(\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            mode: 'markers',\n                            name: v,\n                            marker: {\n                                color: 'rgb(245,245,245)',\n                                size: 1.5,\n                                opacity: 0.7,\n                            },\n                            type: 'scatter',\n                        },\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            name: v,\n                            ncontours: 20,\n                            colorscale: 'Blues',\n                            reversescale: true,\n                            showscale: false,\n                            type: 'histogram2dcontour',\n                        },\n                    );\n                });\n\n                if (params.range.x.length > 0) {\n                    tmpDensityRange['xaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.x,\n                    };\n                }\n\n                if (params.range.y.length > 0) {\n                    tmpDensityRange['yaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.y,\n                    };\n                }\n\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            showlegend: false,\n                            hovermode: 'closest',\n                            bargap: 0,\n                            ...tmpDensityRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'bubble chart':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        mode: 'markers',\n                        name: v,\n                        marker: {\n                            color: 'rgb(93, 164, 214)',\n                            size: params.z,\n                        },\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n        }\n        return obj;\n    };\n\n    params.type.map((v) => {\n        tmpGraphProp = createPropData(tmpGraphProp, v, params);\n    });\n\n    Plotly.newPlot(element, tmpGraphProp.data, tmpGraphProp.layout);\n\n    if (params.func) {\n        element.on('plotly_relayout', params.func);\n    }\n}\n",
				"type": "system"
			}],
			"items": []
		}
	},
	{
		"analysis": {
			"script": {
				"db_id": null,
				"file_name": null,
				"script": null,
				"sql": "",
				"use_script": false
			},
			"setting": {
				"aggregation_default": {
					"type": "column",
					"val": null
				},
				"filter_default": [],
				"items": []
			},
			"type": "none"
		},
		"category": {
			"title": "logserver"
		},
		"convert": {
			"script": {
				"file_name": "convert_machine.py",
				"script": "from resource.script.convert_base import ConvertBase\r\n\r\nimport pandas as pd\r\n\r\n\r\nclass ConvertScript(ConvertBase):\r\n    \"\"\"\r\n    .. class:: ConvertScript\r\n\r\n        This class is for converting input file by user script.\r\n    \"\"\"\r\n\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n\r\n    def run(self) -> pd.DataFrame:\r\n        \"\"\"\r\n        This method will be called by sub process(convert process). Fix this method as you want.\r\n\r\n        :return: DataFrame\r\n        \"\"\"\r\n\r\n        result_list = list()\r\n\r\n        # Read Log File\r\n        lines = self.readlines()\r\n\r\n        for line in lines:\r\n            linelog = line.strip().split(',')\r\n\r\n            if len(linelog) == 2:\r\n                result_list.append({'key': linelog[0], 'val': linelog[1]})\r\n\r\n        df = pd.DataFrame(result_list)\r\n\r\n        return df\r\n",
				"use_script": true
			}
		},
		"func": {
			"info": {
				"log_name": "machine"
			},
			"script": {
				"file_name": null,
				"script": null,
				"use_script": false
			},
			"source_type": "local",
			"title": "machine",
			"system_func": true
		},
		"visualization": {
			"function_graph_type": [{
				"id": null,
				"name": "default",
				"script": "function renderGraph(Plotly, element, params) {\n    let tmpGraphProp = {};\n\n    const createPropData = (obj, type, params) => {\n        let tmpRange = {},\n            tmpDensityRange = {},\n            tmpData = [];\n\n        if (params.range.x.length > 0) {\n            tmpRange['xaxis'] = {\n                range: params.range.x,\n            };\n        }\n\n        if (params.range.y.length > 0) {\n            tmpRange['yaxis'] = {\n                range: params.range.y,\n            };\n        }\n\n        switch (type.toLowerCase()) {\n            case 'bar':\n            default:\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'bar',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'line':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'scatter',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'box plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        y: params.y[v],\n                        type: 'box',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'density plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push(\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            mode: 'markers',\n                            name: v,\n                            marker: {\n                                color: 'rgb(245,245,245)',\n                                size: 1.5,\n                                opacity: 0.7,\n                            },\n                            type: 'scatter',\n                        },\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            name: v,\n                            ncontours: 20,\n                            colorscale: 'Blues',\n                            reversescale: true,\n                            showscale: false,\n                            type: 'histogram2dcontour',\n                        },\n                    );\n                });\n\n                if (params.range.x.length > 0) {\n                    tmpDensityRange['xaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.x,\n                    };\n                }\n\n                if (params.range.y.length > 0) {\n                    tmpDensityRange['yaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.y,\n                    };\n                }\n\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            showlegend: false,\n                            hovermode: 'closest',\n                            bargap: 0,\n                            ...tmpDensityRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'bubble chart':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        mode: 'markers',\n                        name: v,\n                        marker: {\n                            color: 'rgb(93, 164, 214)',\n                            size: params.z,\n                        },\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n        }\n        return obj;\n    };\n\n    params.type.map((v) => {\n        tmpGraphProp = createPropData(tmpGraphProp, v, params);\n    });\n\n    Plotly.newPlot(element, tmpGraphProp.data, tmpGraphProp.layout);\n\n    if (params.func) {\n        element.on('plotly_relayout', params.func);\n    }\n}\n",
				"type": "system"
			}],
			"items": []
		}
	},
	{
		"analysis": {
			"script": {
				"db_id": null,
				"file_name": null,
				"script": null,
				"sql": "",
				"use_script": false
			},
			"setting": {
				"aggregation_default": {
					"type": "column",
					"val": null
				},
				"filter_default": [],
				"items": []
			},
			"type": "none"
		},
		"category": {
			"title": "Overlay"
		},
		"convert": {
			"script": {
				"file_name": null,
				"script": null,
				"use_script": false
			}
		},
		"func": {
			"info": {
				"log_name": "ADCMEASUREMENT"
			},
			"script": {
				"file_name": "preprocess_adc_measurement.py",
				"script": "from resource.script.preprocess_base import PreprocessBase\n\n\nclass PreprocessScript(PreprocessBase):\n    \"\"\"\n    .. class:: PreprocessScript\n\n        This class is for preprocessing input file by user script.\n    \"\"\"\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    def run(self) -> list:\n        \"\"\"\n        This method will be called by sub process(convert process). Fix this method as you want.\n\n        :return: List of String\n        \"\"\"\n        lines = self.readlines()\n\n        ret_lines = list()\n\n        replace_list = ['2427A_', '2427B_', '2427C_', '2427D_', '2427E_', '2427F_']\n\n        for line in lines:\n            for replace in replace_list:\n                line = line.replace(replace, '')\n            ret_lines.append(line)\n\n        return ret_lines\n",
				"use_script": true
			},
			"source_type": "local",
			"title": "ADC Measurement",
			"system_func": true
		},
		"visualization": {
			"function_graph_type": [{
				"id": null,
				"name": "default",
				"script": "function renderGraph(Plotly, element, params) {\n    let tmpGraphProp = {};\n\n    const createPropData = (obj, type, params) => {\n        let tmpRange = {},\n            tmpDensityRange = {},\n            tmpData = [];\n\n        if (params.range.x.length > 0) {\n            tmpRange['xaxis'] = {\n                range: params.range.x,\n            };\n        }\n\n        if (params.range.y.length > 0) {\n            tmpRange['yaxis'] = {\n                range: params.range.y,\n            };\n        }\n\n        switch (type.toLowerCase()) {\n            case 'bar':\n            default:\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'bar',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'line':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        type: 'scatter',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'box plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        y: params.y[v],\n                        type: 'box',\n                        name: v,\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'density plot':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push(\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            mode: 'markers',\n                            name: v,\n                            marker: {\n                                color: 'rgb(245,245,245)',\n                                size: 1.5,\n                                opacity: 0.7,\n                            },\n                            type: 'scatter',\n                        },\n                        {\n                            x: params.x,\n                            y: params.y[v],\n                            name: v,\n                            ncontours: 20,\n                            colorscale: 'Blues',\n                            reversescale: true,\n                            showscale: false,\n                            type: 'histogram2dcontour',\n                        },\n                    );\n                });\n\n                if (params.range.x.length > 0) {\n                    tmpDensityRange['xaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.x,\n                    };\n                }\n\n                if (params.range.y.length > 0) {\n                    tmpDensityRange['yaxis'] = {\n                        showgrid: false,\n                        zeroline: false,\n                        range: params.range.y,\n                    };\n                }\n\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            showlegend: false,\n                            hovermode: 'closest',\n                            bargap: 0,\n                            ...tmpDensityRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n\n            case 'bubble chart':\n                Object.keys(params.y).map((v) => {\n                    tmpData.push({\n                        x: params.x,\n                        y: params.y[v],\n                        mode: 'markers',\n                        name: v,\n                        marker: {\n                            color: 'rgb(93, 164, 214)',\n                            size: params.z,\n                        },\n                    });\n                });\n                if (Object.keys(obj).length === 0) {\n                    obj = {\n                        data: tmpData,\n                        layout: {\n                            title: params.title,\n                            font: {\n                                family: \"Saira, 'Nunito Sans'\",\n                            },\n                            ...tmpRange,\n                        },\n                    };\n                } else {\n                    obj = {\n                        ...obj,\n                        data: obj.data.concat(tmpData),\n                    };\n                }\n                break;\n        }\n        return obj;\n    };\n\n    params.type.map((v) => {\n        tmpGraphProp = createPropData(tmpGraphProp, v, params);\n    });\n\n    Plotly.newPlot(element, tmpGraphProp.data, tmpGraphProp.layout);\n\n    if (params.func) {\n        element.on('plotly_relayout', params.func);\n    }\n}\n",
				"type": "system"
			}],
			"items": []
		}
	}
]